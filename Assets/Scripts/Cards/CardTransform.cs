// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using TBTK;

namespace Cards
{
	public class CardTransform : MonoBehaviour
	{
		public Card transformCard;

		public static Vector3 endScale = new Vector3(0.25f, 0.35f, 0.35f);
		public static float holdTimeTreshold = 0.2f;
		public static float distanceToActivate = 9;
		public static float distanceFromCursorZZoomed = 1.4f;
		public static float distanceFromCursorZShrinked = 0.9f;

		public Vector3 finalPosition;

		public static Vector3 baseScale;

		private Vector3 initialPosition;

		private Quaternion baseRotation;

		private bool cardHeld = false;

		private bool zoomed;

		private float yDistance;

		void Start(){
			this.transformCard = (Card) transform.GetComponent<Card> ();
		}

		void Update(){

			if (cardHeld) {
//				Debug.Log ("Distance from parent: " + Vector3.Distance(this.transform.position, this.transform.parent.position));
				Vector3 mousePos = GameObject.FindWithTag("CardsCamera").GetComponent<Camera>().ScreenToWorldPoint (new Vector3 (Input.mousePosition.x, Input.mousePosition.y, yDistance));

				float distance = Vector3.Distance (mousePos, this.transform.parent.position);

				if (distance < distanceToActivate) {
					if(!zoomed){
						ZoomCard ();
						zoomed = true;
					}
					this.transform.position = mousePos + new Vector3(0,0, distanceFromCursorZZoomed) ;

				} 
				else if(distance >= distanceToActivate){
					if(zoomed){
						scaleDown();
						zoomed = false;
					}
					this.transform.position = mousePos + new Vector3(0,0, distanceFromCursorZShrinked) ;
				}


			} else if (zoomed && this.transform.parent != null) {
				DeZoom ();
			}
			else if(zoomed) {
				this.initialPosition = CardsHandManager.getInstance().cardsLimbo;
				DeZoom ();
			}
		}

		private void scaleDown(){
			transformCard.updateTransform (this.transform.position, this.transform.rotation, baseScale);
		}

		private void activateCard(CardsStackManager stack){

			if (this.transformCard.damageCard) 
				stack.addDamageCard(this.transformCard);
			if (this.transformCard.guardCard)
				stack.addGuardCard (this.transformCard);
			if (this.transformCard.moveCard)
				stack.addMoveCard (this.transformCard);
			if (this.transformCard.magicCard)
					this.transformCard.ActivateMagic ();
			
			if (transformCard.particles != null && transformCard.particles.transform != null)
				StartCoroutine (transformCard.PlayParticle (GameControl.selectedUnit.transform.position));

			GameControl.SelectUnit (GameControl.selectedUnit);

			//Do some sort of animation then destroy this card
			this.transform.SetParent (null);
			this.transform.position = CardsHandManager.getInstance ().cardsLimbo;
			transformCard.stopUpdating ();
			CardsHandManager.getInstance ().cardsInHand.removeCard (transformCard);
			CardsHandManager.getInstance ().cardsInDiscard.addCard (transformCard);
			CardsHandManager.UpdateCardsPosition ();
		}
//
//		public void selectCard(){
//		
//		}
//
//		public void deselectCard(){
//			
//		}

		public void ZoomCard(){
			transformCard.updateTransform (this.transform.position, Quaternion.Euler(new Vector3(90, 0,0)), endScale);
		}
		public void DeZoom(){
			transformCard.updateTransform (this.initialPosition, baseRotation, baseScale);
			zoomed = false;
		}

		void OnMouseDown(){
//			if (CardsHandManager.getInstance () != null && CardsHandManager.getInstance ().mode == CardsHandManager.modes._DeckBuild) {
//				GameObject o = (GameObject)Resources.Load ("Prefabs/Cards/" + this.transform.name);
//				CardsHandManager.getInstance ().instantiator.addPrefab (o);
//			} 
//			else 
			if(!CardsHandManager.movingCard && FactionManager.IsPlayerTurn()){
				yDistance = Camera.main.transform.position.y - this.transform.position.y;
				cardHeld = true;
				this.initialPosition = transform.position;
				CardsHandManager.movingCard = true;
				baseRotation = this.transform.rotation;
			}
		}

		void OnMouseUp(){
			Vector3 mousePos = GameObject.FindWithTag("CardsCamera").GetComponent<Camera>().ScreenToWorldPoint (new Vector3 (Input.mousePosition.x, Input.mousePosition.y, yDistance));
			
			float distance = Vector3.Distance (mousePos, this.transform.parent.position);
			if(CardsHandManager.getInstance () != null && CardsHandManager.getInstance ().mode == CardsHandManager.modes._GameOn && cardHeld){
				if(distance >= distanceToActivate && GameControl.selectedUnit != null && transformCard.CanUseCard()){
					activateCard(GameControl.selectedUnit.getStack());
				}
				else if(!transformCard.CanUseCard()) zoomed = true;
			}
			CardsHandManager.movingCard = false;
			cardHeld = false;

		}

	}
}

